
final 필드

형식 ) 접근 지정자 final 자료형 필드명 = 값; 
	필드값 변경 불가능  
final 필드명은 모두 대문자로 작성하며 단어 구분자로 _ 사용
=> 스네이크 표기법 

상수필드(Constant Field) : 값 대신 사용 하기 위한 고유 명칭 
	
	=> 값을 보다 명확하게 표현하기 위해 선언하여 사용
형식) public static final 자료형 필드명 = 값;

ex) java.lang.Math 클래스 - public static final double PI
			// static 은 인스턴스없이 클래스로 접근 
			// Math.PI 로 접근 
>> API 문서에서 Constant Field Values 에서 저장된 값 확인
	static final = 상수 

2. final 메서드
	자식클래스에서 메서드 오버라이드 선언 불가능 
	
3. final 클래스 
	- final class 부모클래스로 사용 불가능 
	예) System 클래스   final class System 
	final - 필드 : 값 변경 불가
			메서드 : 오버라이드 불가
			클래스 : 상속 불가 
			
4. abstract - 클래스 , 메서드에 붙일수있다 
	abstract 추상 클래스  			 	
	 abstract class 클래스명 { } 
   추상클래스는 인스턴스 생성 불가능 >> 상속 목적인 클래스 
   	추상메서드 >> 명령이 작성되는 영역이 없는 불완전한 메서드
    접근지정자 abstract 반환명 메서드명(파라메터,...);  선언부만 있다.
    추상클래스는 추상메서드가 하나라도 있으면 추상클래스로 선언해줘야 한다.
	    
   추상메서드가 존재하는 추상클래스를 상속받은 자식클래스는 모든 추상메서드를 반드시 오버라이드 해야한다.
    자식클래스가 오버라이드 하지않으면 자식클래스도 추상클래스가 된다.
  
  추상메서드를 만들어 주는 이유 
  >> 자식 클래스에서 반드시 선언해야 되는 메서드와 작성 규칙 제공 : 작업 명세서  
- 추상클래스(부모)로 참조변수를 만들어 자식 인스턴스의 정보 저장 >> 객체 형변환

추상클래스는 인스턴스를 못만들지만 참조변수를 만들어 자식인스턴스의 정보 저장 >> 객체 형변환 이용
오버라이드된건 묵시적 객체 형변환








    